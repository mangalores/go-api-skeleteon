// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/db/types.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/mangalores/go-api-skeleton/pkg/db"
)

// MockQueryObject is a mock of QueryObject interface.
type MockQueryObject struct {
	ctrl     *gomock.Controller
	recorder *MockQueryObjectMockRecorder
}

// MockQueryObjectMockRecorder is the mock recorder for MockQueryObject.
type MockQueryObjectMockRecorder struct {
	mock *MockQueryObject
}

// NewMockQueryObject creates a new mock instance.
func NewMockQueryObject(ctrl *gomock.Controller) *MockQueryObject {
	mock := &MockQueryObject{ctrl: ctrl}
	mock.recorder = &MockQueryObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryObject) EXPECT() *MockQueryObjectMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockQueryObject) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockQueryObjectMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockQueryObject)(nil).Error))
}

// Model mocks base method.
func (m *MockQueryObject) Model() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockQueryObjectMockRecorder) Model() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockQueryObject)(nil).Model))
}

// Preloads mocks base method.
func (m *MockQueryObject) Preloads() []db.Preload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preloads")
	ret0, _ := ret[0].([]db.Preload)
	return ret0
}

// Preloads indicates an expected call of Preloads.
func (mr *MockQueryObjectMockRecorder) Preloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preloads", reflect.TypeOf((*MockQueryObject)(nil).Preloads))
}

// Result mocks base method.
func (m *MockQueryObject) Result() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Result indicates an expected call of Result.
func (mr *MockQueryObjectMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockQueryObject)(nil).Result))
}

// SetError mocks base method.
func (m *MockQueryObject) SetError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetError", err)
}

// SetError indicates an expected call of SetError.
func (mr *MockQueryObjectMockRecorder) SetError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockQueryObject)(nil).SetError), err)
}

// SetResult mocks base method.
func (m *MockQueryObject) SetResult(result interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResult", result)
}

// SetResult indicates an expected call of SetResult.
func (mr *MockQueryObjectMockRecorder) SetResult(result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResult", reflect.TypeOf((*MockQueryObject)(nil).SetResult), result)
}

// MockFilteredQueryObject is a mock of FilteredQueryObject interface.
type MockFilteredQueryObject struct {
	ctrl     *gomock.Controller
	recorder *MockFilteredQueryObjectMockRecorder
}

// MockFilteredQueryObjectMockRecorder is the mock recorder for MockFilteredQueryObject.
type MockFilteredQueryObjectMockRecorder struct {
	mock *MockFilteredQueryObject
}

// NewMockFilteredQueryObject creates a new mock instance.
func NewMockFilteredQueryObject(ctrl *gomock.Controller) *MockFilteredQueryObject {
	mock := &MockFilteredQueryObject{ctrl: ctrl}
	mock.recorder = &MockFilteredQueryObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilteredQueryObject) EXPECT() *MockFilteredQueryObjectMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockFilteredQueryObject) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockFilteredQueryObjectMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockFilteredQueryObject)(nil).Error))
}

// Filters mocks base method.
func (m *MockFilteredQueryObject) Filters() []db.Filter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filters")
	ret0, _ := ret[0].([]db.Filter)
	return ret0
}

// Filters indicates an expected call of Filters.
func (mr *MockFilteredQueryObjectMockRecorder) Filters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filters", reflect.TypeOf((*MockFilteredQueryObject)(nil).Filters))
}

// Model mocks base method.
func (m *MockFilteredQueryObject) Model() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockFilteredQueryObjectMockRecorder) Model() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockFilteredQueryObject)(nil).Model))
}

// Preloads mocks base method.
func (m *MockFilteredQueryObject) Preloads() []db.Preload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preloads")
	ret0, _ := ret[0].([]db.Preload)
	return ret0
}

// Preloads indicates an expected call of Preloads.
func (mr *MockFilteredQueryObjectMockRecorder) Preloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preloads", reflect.TypeOf((*MockFilteredQueryObject)(nil).Preloads))
}

// Result mocks base method.
func (m *MockFilteredQueryObject) Result() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Result indicates an expected call of Result.
func (mr *MockFilteredQueryObjectMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockFilteredQueryObject)(nil).Result))
}

// SetError mocks base method.
func (m *MockFilteredQueryObject) SetError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetError", err)
}

// SetError indicates an expected call of SetError.
func (mr *MockFilteredQueryObjectMockRecorder) SetError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockFilteredQueryObject)(nil).SetError), err)
}

// SetResult mocks base method.
func (m *MockFilteredQueryObject) SetResult(result interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResult", result)
}

// SetResult indicates an expected call of SetResult.
func (mr *MockFilteredQueryObjectMockRecorder) SetResult(result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResult", reflect.TypeOf((*MockFilteredQueryObject)(nil).SetResult), result)
}

// MockSlicedQueryObject is a mock of SlicedQueryObject interface.
type MockSlicedQueryObject struct {
	ctrl     *gomock.Controller
	recorder *MockSlicedQueryObjectMockRecorder
}

// MockSlicedQueryObjectMockRecorder is the mock recorder for MockSlicedQueryObject.
type MockSlicedQueryObjectMockRecorder struct {
	mock *MockSlicedQueryObject
}

// NewMockSlicedQueryObject creates a new mock instance.
func NewMockSlicedQueryObject(ctrl *gomock.Controller) *MockSlicedQueryObject {
	mock := &MockSlicedQueryObject{ctrl: ctrl}
	mock.recorder = &MockSlicedQueryObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlicedQueryObject) EXPECT() *MockSlicedQueryObjectMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockSlicedQueryObject) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockSlicedQueryObjectMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockSlicedQueryObject)(nil).Error))
}

// Filters mocks base method.
func (m *MockSlicedQueryObject) Filters() []db.Filter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filters")
	ret0, _ := ret[0].([]db.Filter)
	return ret0
}

// Filters indicates an expected call of Filters.
func (mr *MockSlicedQueryObjectMockRecorder) Filters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filters", reflect.TypeOf((*MockSlicedQueryObject)(nil).Filters))
}

// Model mocks base method.
func (m *MockSlicedQueryObject) Model() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockSlicedQueryObjectMockRecorder) Model() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockSlicedQueryObject)(nil).Model))
}

// Preloads mocks base method.
func (m *MockSlicedQueryObject) Preloads() []db.Preload {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preloads")
	ret0, _ := ret[0].([]db.Preload)
	return ret0
}

// Preloads indicates an expected call of Preloads.
func (mr *MockSlicedQueryObjectMockRecorder) Preloads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preloads", reflect.TypeOf((*MockSlicedQueryObject)(nil).Preloads))
}

// Result mocks base method.
func (m *MockSlicedQueryObject) Result() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Result indicates an expected call of Result.
func (mr *MockSlicedQueryObjectMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockSlicedQueryObject)(nil).Result))
}

// SetError mocks base method.
func (m *MockSlicedQueryObject) SetError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetError", err)
}

// SetError indicates an expected call of SetError.
func (mr *MockSlicedQueryObjectMockRecorder) SetError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockSlicedQueryObject)(nil).SetError), err)
}

// SetResult mocks base method.
func (m *MockSlicedQueryObject) SetResult(result interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResult", result)
}

// SetResult indicates an expected call of SetResult.
func (mr *MockSlicedQueryObjectMockRecorder) SetResult(result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResult", reflect.TypeOf((*MockSlicedQueryObject)(nil).SetResult), result)
}

// Slice mocks base method.
func (m *MockSlicedQueryObject) Slice() *db.Slice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slice")
	ret0, _ := ret[0].(*db.Slice)
	return ret0
}

// Slice indicates an expected call of Slice.
func (mr *MockSlicedQueryObjectMockRecorder) Slice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slice", reflect.TypeOf((*MockSlicedQueryObject)(nil).Slice))
}
